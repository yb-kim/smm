#! /usr/bin/env python
import os
import subprocess
import openpyxl 
import datetime

r = 0

def getStatsHelper(ws, progName, expType, CMType):
    #       print progName + ' ' + expType + ' ' + CMType
    #       print r
    c = 1
    ws.cell(row = r, column = c).value = progName
    c = c+1

    output = subprocess.Popen("grep sim_insts results/"+expType+"/"+CMType+"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
    tempList = output.split()
    if len(tempList) == 0:
        return
    numInsts = float(tempList[1])
    #   print numInsts
    ws.cell(row = r, column = c).value = numInsts
    c = c+1

    if CMType == "smm":
        ws.cell(row = r, column = c).value = numInsts*TPI
        return

    output = subprocess.Popen("grep system.cpu.workload.num_dmacalls results/"+expType+"/"+CMType+"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
    tempList = output.split()
    numDMA = float(tempList[1])
    #print numDMA
    ws.cell(row = r, column = c).value = numDMA
    c = c+1

    output = subprocess.Popen("grep system.cpu.workload.bytes_transferred_dma results/"+expType+"/"+CMType+"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
    tempList = output.split()
    DMASize = float(tempList[1])
    #print DMASize
    ws.cell(row = r, column = c).value = DMASize
    c = c+1

    ws.cell(row = r, column = c).value = numInsts*TPI + numDMA*startupCost + DMASize*transferTimePerByte
    c = c + 1

    output = subprocess.Popen("grep num_func_calls_cget results/"+expType+"/"+CMType+"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
    tempList = output.split()
    numCalls_cget = float(tempList[1])
    ws.cell(row = r, column = c).value = numCalls_cget
    c = c+1

    output = subprocess.Popen("grep num_insts_cget results/"+expType+"/"+CMType+"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
    tempList = output.split()
    numInsts_cget = float(tempList[1])
    ws.cell(row = r, column = c).value = numInsts_cget
    c = c+1

    """
    ws2['A1'] = "Benchmarks"
    ws2['B1'] = "Number of Instructions"
    ws2['C1'] = "Number of DMA"
    ws2['D1'] = "DMA Size"
    ws2['E1'] = "Execution Time"
    ws2['F1'] = "Number of Calls of cget"
    ws2['G1'] = "Number of Instructions Executed of cget"
    ws2['H1'] = "Time consumed starting DMA"
    ws2['I1'] = "Time consumed transferring data in DMA"
    ws2['J1'] = "Time consumed in cget"
    ws2['K1'] = "Time consumed in progarm code"
    ws2['L1'] = "SPM size"
    ws2['M1'] = "Used SPM space"
    ws2['N1'] = "Number of regions"
    """

    ws.cell(row = r, column = c).value = numDMA * startupCost
    c += 1

    ws.cell(row=r, column=c).value = DMASize * transferTimePerByte
    c += 1

    ws.cell(row=r, column=c).value = numInsts_cget * TPI
    c += 1

    ws.cell(row=r, column=c).value = (numInsts - numInsts_cget) * TPI
    c += 1

    with open("results/%s/%s/regions.txt" % (expType, CMType)) as regionFile:
        spmSize = int(regionFile.readline().split()[-1])
        usedSpmSpace = 0
        nRegions = int(regionFile.readline().split()[-1])

    ws.cell(row=r, column=c).value = spmSize
    c += 1

    #ws.cell(row=r, column=c).value = usedSpmSpace
    #c += 1

    ws.cell(row=r, column=c).value = nRegions
    c += 1




def getStats(expType):

    wb = openpyxl.Workbook()
    ws1 = wb.active
    ws1.title = "smm"
    ws2 = wb.create_sheet("smmcm")
    ws3 = wb.create_sheet("fs_smmcm")

    ws1['A1'] = "Benchmarks"
    #ws1['B1'] = "SPM Size"
    ws1['B1'] = "Number of Instructions"
    ws1['C1'] = "Execution Time"

    ws2['A1'] = "Benchmarks"
    ws2['B1'] = "Number of Instructions"
    ws2['C1'] = "Number of DMA"
    ws2['D1'] = "DMA Size"
    ws2['E1'] = "Execution Time"
    ws2['F1'] = "Number of Calls of cget"
    ws2['G1'] = "Number of Instructions Executed of cget"
    ws2['H1'] = "Time consumed starting DMA"
    ws2['I1'] = "Time consumed transferring data in DMA"
    ws2['J1'] = "Time consumed in cget"
    ws2['K1'] = "Time consumed in progarm code"
    ws2['L1'] = "SPM size"
    #ws2['M1'] = "Used SPM space"
    ws2['M1'] = "Number of regions"

    ws3['A1'] = "Benchmarks"
    ws3['B1'] = "Number of Instructions"
    ws3['C1'] = "Number of DMA"
    ws3['D1'] = "DMA Size"
    ws3['E1'] = "Execution Time"
    ws3['F1'] = "Number of Calls of cget"
    ws3['G1'] = "Number of Instructions Executed of cget"
    ws3['H1'] = "Time consumed starting DMA"
    ws3['I1'] = "Time consumed transferring data in DMA"
    ws3['J1'] = "Time consumed in cget"
    ws3['K1'] = "Time consumed in progarm code"
    ws3['L1'] = "SPM size"
    #ws3['M1'] = "Used SPM space"
    ws3['M1'] = "Number of regions"


    root = os.getcwd()
    directories = []
    for path in os.listdir(root):
        if os.path.isdir(path):
            directories.append(path)
    #   directories = ['stringsearch','test2']
    directories.remove('patricia')
    #print directories


    global r
    r = 2
    for directory in directories:
        os.chdir(directory)
        #print directory
        getStatsHelper(ws1, directory, expType, "smm");
        getStatsHelper(ws2, directory, expType, "smmcm");
        getStatsHelper(ws3, directory, expType, "fs_smmcm");
        #getStatsHelper(ws3, directory, expType, "smmecm");

        r = r+1
        os.chdir(root)

    ws4 = wb.create_sheet("summary")
    ws4['A1'] = "Benchmarks"
    ws4['B1'] = "Execution time in smmcm"
    ws4['C1'] = "Execution time in fs_smmcm"
    ws4['D1'] = "DMA size in smmcm"
    ws4['E1'] = "DMA size in fs_smmcm"

    """
    ws3['A1'] = "Benchmarks"
    ws3['B1'] = "Number of Instructions"
    ws3['C1'] = "Number of DMA"
    ws3['D1'] = "DMA Size"
    ws3['E1'] = "Execution Time"
    ws3['F1'] = "Number of Calls of cget"
    ws3['G1'] = "Number of Instructions Executed of cget"
    ws3['H1'] = "Time consumed starting DMA"
    ws3['I1'] = "Time consumed transferring data in DMA"
    ws3['J1'] = "Time consumed in cget"
    ws3['K1'] = "Time consumed in progarm code"
    ws3['L1'] = "SPM size"
    #ws3['M1'] = "Used SPM space"
    ws3['M1'] = "Number of regions"
    """

    for i in range(len(directories)):
        row = i+2
        ws4.cell(row=row, column=1).value = ws2.cell(row=row, column=1).value
        ws4.cell(row=row, column=2).value = ws2.cell(row=row, column=5).value
        ws4.cell(row=row, column=3).value = ws3.cell(row=row, column=5).value
        ws4.cell(row=row, column=4).value = ws2.cell(row=row, column=4).value
        ws4.cell(row=row, column=5).value = ws3.cell(row=row, column=4).value

    wb.save("experiment-" + expType +".xlsx")

    wb_size = openpyxl.Workbook()
    wb_size_split = openpyxl.Workbook()

    for wb in [wb_size, wb_size_split]:
        ws1 = wb.active
        ws1.title = "statistics"
        sizes = {}

        ws1['A1'] = "benchmarks"
        ws1['B1'] = "max function size"
        ws1['C1'] = "min function size"


        summaryRow = 2

        for directory in directories:
            ws1.cell(row=summaryRow, column=1).value = directory

            ws = wb.create_sheet(directory)

            ws['A1'] = "Function"
            ws['B1'] = "Size"
            ws['C1'] = "Region"

            os.chdir(directory)

            if wb == wb_size:
                fileName = "_mapping"
            else:
                fileName = "function-split/_mapping"

            regions = []
            regionsByName = {}
            try:
                with open(fileName) as inFile:
                    nRegions = int(inFile.readline())
                    regions = [[] for i in range(nRegions)]
                    for line in inFile:
                        function, region = line.split()
                        region = int(region)
                        regions[region].append(function)
                        regionsByName[function] = region
            except:
                pass

            if wb == wb_size:
                fileName = "_func_size"
            else:
                fileName = "function-split/_func_size"

            try:
                with open(fileName) as inFile:
                    row = 2
                    for line in inFile:
                        function, size = line.split()
                        if not function in regionsByName.keys():
                            continue
                        size = int(size)
                        sizes[function] = size
                        ws.cell(row=row, column=1).value = function
                        ws.cell(row=row, column=2).value = size
                        ws.cell(row=row, column=3).value = regionsByName[function]

                        row += 1

                ch1 = openpyxl.chart.BarChart()
                ch1.type = "col"
                data = openpyxl.chart.Reference(ws, min_col=2, min_row=1, max_col=2, max_row=row-1)
                titles = openpyxl.chart.Reference(ws, min_col=1, min_row=2, max_row=row-1)
                ch1.add_data(data, titles_from_data=True)
                ch1.set_categories(titles)
                ws.add_chart(ch1, "D4")

                temp = "=MAX(%s!%s:%s)" % (directory, "B2", ws.cell(row=row-1, column=2).coordinate)
                ws1.cell(row=summaryRow, column=2).value = temp

                temp = "=MIN(%s!%s:%s)" % (directory, "B2", ws.cell(row=row-1, column=2).coordinate)
                ws1.cell(row=summaryRow, column=3).value = temp

                row += 1
                ws.cell(row=row, column=1).value = 'Region'
                ws.cell(row=row, column=2).value = 'Size'
                ws.cell(row=row, column=3).value = 'minFunctionSize'
                row += 1
                
                i = 0
                for region in regions:
                    ws.cell(row=row, column=1).value = i
                    ws.cell(row=row, column=2).value = max([sizes[function] for function in region])
                    ws.cell(row=row, column=3).value = min([sizes[function] for function in region])
                    i += 1
                    row += 1

            except:
                print "fail to open file"
                pass


            summaryRow += 1
            os.chdir(root)

    wb_size.save("function_size_cm.xlsx")
    wb_size_split.save("function_size_fs_cm.xlsx")


TPI = 0.9375 # 3 cycles
startupCost = 91
transferTimePerByte = 0.075
#getStats("min")
#getStats("mid")
#getStats("50")

rootdir = "/home/ybkim/dropbox/2016_ESWEEK/stats"
dirName = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
subprocess.call("mkdir %s/%s" % (rootdir, dirName), shell=True)
for i in range(10, 110, 10):
    getStats("%s" % i)
    subprocess.call("mv experiment-%d.xlsx %s/%s" % (i, rootdir, dirName), shell=True)
getStats("%s" % "min")
subprocess.call("mv experiment-%s.xlsx %s/%s" % ("min", rootdir, dirName), shell=True)
subprocess.call("mv function_size_cm.xlsx %s/%s" % (rootdir, dirName), shell=True)
subprocess.call("mv function_size_fs_cm.xlsx %s/%s" % (rootdir, dirName), shell=True)
