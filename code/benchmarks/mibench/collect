#! /usr/bin/env python
import os
import subprocess
import sys

cwd = os.getcwd()
directories = []
not_working = ["dijkstra", "patricia"]

for path in os.listdir(cwd):
    if os.path.isdir(path) and path not in not_working:
        directories.append(path)

commands = ["functionSize", "setSpmSize", "regions"]

try:
    command = sys.argv[1]
except:
    print "commands: %s" % (' '.join(commands))
    exit()

def getBenchmarkSizes():
    benchmarks = {}
    for directory in directories:
        if directory in ["dijkstra", "patricia"]:
            continue
        os.chdir(directory)
        functionSizes = {}
        functions = []
        with open("_func_size") as funcSize:
            for line in funcSize:
                tokens = line.split(" ")
                functionName = tokens[0]
                functionSize = int(tokens[1].strip())
                functionSizes[functionName] = functionSize

        try:
            with open("_mapping") as mappingFile:
                mappingFile.readline()
                for line in mappingFile:
                    tokens = line.split(" ")
                    function = tokens[0]
                    functions.append(function)
        except:
            print "error reading _mapping of %s" % directory
            pass

        mappedFunctionSizes = {}
        for function in functions:
            size = functionSizes[function]
            mappedFunctionSizes[function] = size
        benchmarks[directory] = mappedFunctionSizes

        os.chdir(cwd)

    return benchmarks


def getRegions():
    benchmarks = {}
    for directory in directories:
        fileName = directory + "/_mapping"
        if not os.path.isfile(fileName):
            benchmarks[directory] = False
            continue
        with open(fileName) as mappingFile:
            regions = dict()
            nRegions = int(mappingFile.readline())
            for i in range(nRegions):
                regions[i] = []
            for line in mappingFile:
                tokens = line.split()
                functionName = tokens[0]
                index = int(tokens[1])
                regions[index].append(functionName)
            benchmarks[directory] = regions
    return benchmarks


if command == "functionSize":

    benchmarks = getBenchmarkSizes()

    with open("functionSize", "w") as outFile:
        for benchmark in benchmarks:
            out = []
            out.append(benchmark)
            sizes = benchmarks[benchmark]
            for function in sizes:
                sizeInfo = function + ("\t%d" % sizes[function])
                out.append(sizeInfo)
            out.append("\n")
            outFile.write('\n'.join(out))

if command == "setSpmSize":
    try:
        size = int(sys.argv[2])
    except:
        print "usage: setSpmSize {desiredSize%}"
        exit()
    
    benchmarks = getBenchmarkSizes()
    ratio = size/float(100)

    for directory in directories:
        benchmark = benchmarks[directory]
        benchmarkSize = sum(
            [benchmark[function] for function in benchmark])
        newSize = int(benchmarkSize * ratio)

        fileName = directory+"/configure-smm"
        temp = []
        with open(fileName) as configureFile:
            for line in configureFile:
                if line.startswith("#") or not line.strip():
                    temp.append(line)
                    continue
                if not line.startswith("smmmake"):
                    temp.append(line)
                    continue
                sizeOptionIndex = line.find("--spm-size")
                if sizeOptionIndex > 0:
                    config = line[:sizeOptionIndex]
                else:
                    config = line
                config = config.strip() + " "
                config += "--spm-size %d\n" % newSize
                temp.append(config)

        with open(fileName, "w") as configureFile:
            configureFile.writelines(temp)


if command == "regions":
    benchmarks = getRegions()
    sizeByBenchmarks = getBenchmarkSizes()
    summary = []
    summary.append("benchmark\tmin\tavg\tmax")
    with open("regions", "w") as outFile:
        lines = []
        for benchmark in benchmarks:
            lines.append(benchmark)
            regions = benchmarks[benchmark]
            sizes = sizeByBenchmarks[benchmark]

            if not regions:
                lines.append("No possible mapping\n\n")
                continue

            minSizes = []
            maxSizes = []
            avgSizes = []

            for index in regions:
                functions = regions[index]
                temp = "[" +" ".join(functions) + "]"
                count = len(functions)
                functionSizes = [sizes[function] for function in functions]
                minSize = min(functionSizes)
                maxSize = max(functionSizes)
                sizeSum = sum(functionSizes)
                sizeAvg = float(sizeSum)/count
                temp += " %d %d %d %.1f\n" % (count, minSize, maxSize, sizeAvg)

                minSizes.append(minSize)
                maxSizes.append(maxSize)
                avgSizes.append(sizeAvg)

                lines.append(temp)

            summary.append("%s\t%d\t%f\t%d" % (
                benchmark, sum(minSizes), sum(avgSizes), sum(maxSizes)))
            lines.append("\n")

        outFile.writelines("\n".join(lines))
        outFile.writelines("\n".join(summary))
